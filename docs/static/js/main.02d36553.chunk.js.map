{"version":3,"sources":["components/Logo/brain.png","components/Navigation/Navigation.js","components/SignIn/SignIn.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","className","SignIn","id","htmlFor","type","name","value","href","Logo","options","max","height","width","src","brain","alt","ImageLinkForm","onInputChange","onButtonSubmit","onChange","onClick","FaceRecognition","imageUrl","box","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Rank","app","Clarifai","App","apiKey","particleParams","particles","number","density","enable","value_area","calcFaceCoords","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","showFaceBox","console","log","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","route","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02d36553.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.87466cd4.png\";","import React from 'react';\n\nconst Navigation = () => {\n  return (\n    <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\n      <p className='f3 link dim black underline pa3 pointer'>Sign Out</p>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst SignIn = () => {\n  return (\n    <article className='br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center'>\n      <main className='pa4 black-80'>\n        <form className='measure'>\n          <fieldset id='sign_up' className='ba b--transparent ph0 mh0'>\n            <legend className='f2 fw6 ph0 mh0'>Sign In</legend>\n            <div className='mt3'>\n              <label className='db fw6 lh-copy f6' htmlFor='email-address'>\n                Email\n              </label>\n              <input\n                className='pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                type='email'\n                name='email-address'\n                id='email-address'\n              />\n            </div>\n            <div className='mv3'>\n              <label className='db fw6 lh-copy f6' htmlFor='password'>\n                Password\n              </label>\n              <input\n                className='b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                type='password'\n                name='password'\n                id='password'\n              />\n            </div>\n          </fieldset>\n          <div className=''>\n            <input\n              className='b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib'\n              type='submit'\n              value='Sign in'\n            />\n          </div>\n          <div className='lh-copy mt3'>\n            <a href='#0' className='f6 link dim black db'>\n              Register\n            </a>\n          </div>\n        </form>\n      </main>\n    </article>\n  );\n};\n\nexport default SignIn;\n","import React from 'react';\nimport Tilt from 'react-tilt';\nimport brain from './brain.png';\nimport './Logo.css';\n\nconst Logo = () => {\n  return (\n    <div className='ma4 mt0'>\n      <Tilt\n        className='Tilt br2 shadow-2'\n        options={{ max: 55 }}\n        style={{ height: 150, width: 150 }}\n      >\n        <div className='Tilt-inner pa3'>\n          <img src={brain} alt='logo' />\n        </div>\n      </Tilt>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\nimport './ImageLinkForm.css';\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\n  return (\n    <div>\n      <p className='f3'>\n        {\"Give me the picture of a human, I'll highlight the face for you!\"}\n      </p>\n      <div className='center'>\n        <div className='form center pa4 br3 shadow-5'>\n          <input\n            type='text'\n            className='f4 pa2 w-70 center'\n            onChange={onInputChange}\n          />\n          <button\n            className='w-30 grow f4 link ph3 pv2 dib white bg-dark-blue'\n            onClick={onButtonSubmit}\n          >\n            Show Face\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageLinkForm;\n","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ imageUrl, box }) => {\n  return (\n    <div className='center ma'>\n      <div className='absolute m2'>\n        <img\n          id='input__image'\n          alt=''\n          src={imageUrl}\n          width='500px'\n          height='auto'\n        />\n        <div\n          className='bounding-box'\n          style={{\n            top: box.topRow,\n            right: box.rightCol,\n            bottom: box.bottomRow,\n            left: box.leftCol\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default FaceRecognition;\n","import React from 'react';\n\nconst Rank = () => {\n  return (\n    <div>\n      <div className='white f3'>{'Liviu, your current rank is...'}</div>\n      <div className='white f1'>{'#1'}</div>\n    </div>\n  );\n};\n\nexport default Rank;\n","import React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: '88f9590e6fde4cdfa484152130055061'\n});\n\nconst particleParams = {\n  particles: {\n    number: {\n      value: 30,\n      density: {\n        enable: true,\n        value_area: 800 //150\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin'\n    };\n  }\n\n  calcFaceCoords = data => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    /* clarifaiFace will get from the Clarifai API:\n    'bounding_box': {\n             'top_row': 0.3,\n             'left_col': 0.2,\n             'bottom_row': 0.7,\n             'right_col': 0.8\n           } \n      These are percentages of the image dimensions. */\n    const image = document.getElementById('input__image');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    // console.log(width, height);\n\n    // So we need to calculate the coords of the face box(es)\n    // and draw it as a rectangular border\n\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height\n    };\n  };\n\n  // Populate the box{} of the state\n  showFaceBox = box => {\n    console.log(box);\n    this.setState({ box });\n  };\n\n  onInputChange = event => {\n    this.setState({ input: event.target.value });\n  };\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then(response => this.showFaceBox(this.calcFaceCoords(response)))\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        <Particles className='particles' params={particleParams} />\n        <Navigation />\n        {this.state.route === 'signin' ? (\n          <SignIn />\n        ) : (\n          <>\n            <Logo />\n            <Rank />\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}\n            />\n            <FaceRecognition\n              box={this.state.box}\n              imageUrl={this.state.imageUrl}\n            />\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// console.log(\n//   response.outputs[0].data.regions[0].region_info.bounding_box\n// );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}